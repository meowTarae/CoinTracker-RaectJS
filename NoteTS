TypeScript

; const plus = (a, b) => a + b;
; if a = 2, b = 사과,
; plus(a, b) = ?
; JS -> 실행 후 undefined를 출력.

; 이를 방지하기 위해
; const plus = (a:number, b:number) => a + b; 로
; 실행 전 에러를 감지해줌

interface TaraeProps {
; interface는 object가 어떤식으로 보일지 설명해 줌.
    bgColor: string;
    textColor: string;
}

function Tarae({bgColor}: TaraeProps){
    ~~
}


ex 1)
const Log = (OBJ: TaraeProps) => `
    My bgColor is ${OBJ.bgColor} !
`;

Log({bgColor:"black", textColor:"yellow"});
Log({bgColor:"blue", textColor:"white"});

; Prop-Types과 비슷하나, 
; TS는 실행 '전' 에러를 잡아내 줌.


ex 2)
const Container = styled.div<ContainerProps>`
    background-color: ${(p)=> p.bgColor}
`;


@ Optional

interface CircleProps {
  bgColor: string; // necessary
  borderColor?: string; // optional
}


@ default (초기값)

function Circle({ Color, text = "Tarae" }: CircleProps) {
  return 
    <Box Color={Color ?? "white"}>;
        {text}
    </Box>
}
; Color처럼 ??로,
; 혹은 argument 자리에서 text처럼
; default값을 설정할 수 있다.


@ Theme
; TS에서는 ~~.d.ts라는 파일에 미리 선언을 해준다



@ Fragment
; 부모 관계가 아닌 다수를 리턴할 수 있음
return (
    <>
        <Tarae />
        <App />
    </>
);


@ CSS Reset
import { createGlobalStyle } from "styled-components";
const GlobalStyle = createGlobalStyle`
    https://github.com/zacanger/styled-reset/blob/master/src/index.ts
    ; 위 사이트 접속 후 복사
    * {
      box-sizing: border-box; 
    }
    body {
        font-family: 'Source Sans Pro', sans-serif;
    }
    a {
        text-decoration: none;
    }
    ; 추가로 적어주면 좋다.
`;


@ Slice
const a = [1, 2, 3, 4]

a.slice(0, 3) => [1, 2, 3]
; =초기값(= 0)부터 3개 출력



@ Tip!
    const getMovies = async () => {
        const json = await (
        await fetch("주소")
        ).json();
    };

를 아래처럼

    (async () => {
          const json = await (
            await fetch("주소")
        ).json();
    })();

; ()()를 활용하여 const 한 번 줄일 수 있다.



@ Styled with Link and a (= anchor)

; Link 기능이 결국 anchor랑 같은 거라서
; style에서 a{} 로 꾸미자.



@ Magical registe to Interface

1. console.log(~);
2. inspect에 나오는 값을 
   마우스 우클릭 - store object as ~ 클릭
3. Object.keys(temp1).join()
4. Object.values(temp1).map(v => typeof v).join()
; 복붙하면 끝 !

; type중에 object라고 있는데
; 그건 함수기 때문에 내부에 뭔가가 있다.

; 필요한 정보라면, 여기도 동일하게
; 다 interface에 등록을 해야한다.





@ useRouteMatch
; user가 특정 URL에 있는지 여부를 확인해줌.

const coinMatch = useRouteMatch("/coin");
; 만약 true면 object를 출력하고,
; false면 null을 출력함.




React Query

; 설치방법 
import { QueryClient, QueryClientProvider } from "react-query";
; index에서 앱을 wrap 하자
const queryClient = new QueryClient();

<QueryClientProvider client={QueryClient}>
    <App />
</QueryClientProvider>


; 외부 데이터를 가져오기위한 fetch작업을
; react query로 표현 방법

1. 새 탭에 fetcher 함수 작성
ex) api.ts

export function fetchCoins() {
  return fetch("주소").then((response) =>
    response.json()
  );
}

2. 본문 수정
const { isLoading, data } = useQuery<ICoin[]>("allCoins", fetchCoins);
; 로딩중인지 아닌지를 알 수 있으며
; fecth한 자료는 data에 저장
; allCoins는 queryKey, 내 query의 고유식별자이다.
; fetchCoins는 fetcher 함수.


; reactQuery는 데이터를 캐쉬에 보관하기에 데이터 유지가 가능하다






@ Tip

useEffect(() => {
    ~~
}, [coinId]);

마지막 []에 coinId같은 값? 공백? 
; coinId가 변하면 useEffect가 다시 실행 될텐데
; 이는 그냥 []과도 같은 결과를 도출하지만,
; []안에, 내가 봤을때 절대 변하지 않을 것 같은
; coinId 같은것을 넣어줌으로써 고성능의 hooks를 사용할 수 있음